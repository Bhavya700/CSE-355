from cse355_machine_design import PDA, registry


def problem1():
    """
    L_1 = {w in {0,1}* | w has at least three 1s}
    """

    Q = {"q0","q1","q2","q3","q4","q5"}
    Sigma = {"0","1"}
    Gamma = {"$"}
    delta = {
        ("q0", "_", "_"):{("q1", "$")},
        ("q1", "0", "_"):{("q1", "_")},
        ("q1", "1", "_"):{("q2", "_")},
        ("q2", "0", "_"):{("q2", "_")},
        ("q2", "1", "_"):{("q3", "_")},
        ("q3", "0", "_"):{("q3", "_")},
        ("q3", "1", "_"):{("q4", "_")},
        ("q4", "0", "_"):{("q4", "_")},
        ("q4", "1", "_"):{("q4", "_")},
        ("q4", "_", "$"):{("q5", "_")},
    }
    q0 = "q0"
    F = {"q5"}

    return PDA(Q, Sigma, Gamma, delta, q0, F)


def problem2():
    """
    L_2 = {w in {0,1}* | w starts and ends with the same symbol}
    """

    Q = {"q0","q1","q2","q3","q4","qgar"}
    Sigma = {"0","1"}
    Gamma = {"0","1","$"}
    delta = {
        ("q0", "_", "_"):{("q1", "$")},
        ("q1", "0", "_"):{("q2", "0")},
        ("q1", "1", "_"):{("q2", "1")},
        ("q1","0","$"):{("q3","$")},
        ("q1","1","$"):{("q3","$")},
        ("q2", "0", "_"):{("q2", "_")},
        ("q2", "1", "_"):{("q2", "_")},
        ("q2", "0", "0"):{("q3", "_")},
        ("q2", "1", "1"):{("q3", "_")},
        ("q3", "0", "_"):{("qgar", "_")},
        ("q3", "1", "_"):{("qgar", "_")},
        ("q3", "_", "$"):{("q4", "_")},
    }
    q0 = "q0"
    F = {"q4"}

    return PDA(Q, Sigma, Gamma, delta, q0, F)


def problem3():
    """
    L_3 = {w in {0,1}* | |w| is odd and its middle symbol is 0}
    """

    Q = {"q0","q1","q2","q3"}
    Sigma = {"0","1"}
    Gamma = {"0","$"}
    delta = {
        ("q0", "_", "_"):{("q1", "$")},
        ("q1", "0", "_"):{("q1", "0"),("q2", "_")},
        ("q1", "1", "_"):{("q1", "0")},
        ("q2", "0", "0"):{("q2", "_")},
        ("q2", "1", "0"):{("q2", "_")},
        ("q2", "_", "$"):{("q3", "_")}
    }
    q0 = "q0"
    F = {"q3"}

    return PDA(Q, Sigma, Gamma, delta, q0, F)


def problem4():
    """
    L_4 = {w in {0,1}* | w is a palindrome}
    """

    Q = {"q0","q1","q2","q3","q4"}
    Sigma = {"0","1"}
    Gamma = {"0","1","$"}
    delta = {
        ("q0", "_", "_"): {("q1", "$")},
        ("q1", "0", "_"): {("q1", "0")},
        ("q1", "1", "_"): {("q1", "1")},
        ("q1", "_", "_"): {("q2", "_")},
        ("q2", "0", "_"): {("q3", "_")},
        ("q2", "1", "_"): {("q3", "_")},
        ("q2", "_", "_"): {("q3", "_")},
        ("q3", "0", "0"): {("q3", "_")},
        ("q3", "1", "1"): {("q3", "_")},
        ("q3", "_", "$"): {("q4", "_")}
    }
    q0 = "q0"
    F = {"q4"}

    return PDA(Q, Sigma, Gamma, delta, q0, F)


def problem5():
    """
    L_5 = {w#x | w, x in {0, 1}* and w^R is a substring of x}
    """

    Q = {"q0","q1","q2","q3","q4","q5","qgar","qa"}
    Sigma = {"0","1","#"}
    Gamma = {"0","1","$"}
    delta = {
        ("q0", "_", "_"): {("q1", "$")},
        ("q1", "0", "_"): {("q1", "0")},
        ("q1", "1", "_"): {("q1", "1")},
        ("q1", "#", "_"): {("q2", "_")},
        ("q2", "_", "_"): {("q3", "_")},
        ("q2", "0", "0"): {("q3", "_")},
        ("q2", "1", "1"): {("q3", "_")},
        ("q2", "0", "_"): {("q4", "_")},
        ("q2", "1", "_"): {("q4", "_")},
        ("q4", "0", "0"): {("q3", "_")},
        ("q4", "1", "1"): {("q3", "_")},
        ("q4", "0", "_"): {("q4", "_")},
        ("q4", "1", "_"): {("q4", "_")},
        ("q3", "_", "_"): {("q5", "_")},
        ("q3", "0", "0"): {("q3", "_")},
        ("q3", "1", "1"): {("q3", "_")},
        ("q3", "0", "_"): {("qgar", "_")},
        ("q3", "1", "_"): {("qgar", "_")},
        ("q5", "0", "_"): {("q5", "_")},
        ("q5", "1", "_"): {("q5", "_")},
        ("q5", "_", "$"): {("qa", "_")}
    }
    q0 = "q0"
    F = {"qa"}

    return PDA(Q, Sigma, Gamma, delta, q0, F)


def problem6():
    """
    L_6 = {0^m1^n | m > n >= 0}
    """

    Q = {"q0","q1","q2","q3","q4","q5"}
    Sigma = {"0","1"}
    Gamma = {"$","1"}
    delta = {
        ("q0", "_", "_"):{("q1", "$")},
        ("q1", "0", "_"):{("q2", "1")},
        ("q2", "0", "_"):{("q2", "1")},
        ("q2", "1", "1"):{("q3", "_")},
        ("q2", "_", "1"):{("q4", "_")},
        ("q3", "1", "1"):{("q3", "_")},
        ("q3", "_", "1"):{("q4", "_")},
        ("q4", "_", "1"):{("q4", "_")},
        ("q4", "_", "$"):{("q5", "_")}
    }
    q0 = "q0"
    F = {"q5"}

    return PDA(Q, Sigma, Gamma, delta, q0, F)


def problem7():
    """
    L_7 = {0^m1^(m-n)0^n | m >= n >= 0}
    """

    Q = {"q0","q1","q2","q3","q4"}
    Sigma = {"0","1"}
    Gamma = {"$","1"}
    delta = {
        ("q0", "_", "_"):{("q1", "$"), ("q4", "_")},
        ("q1", "_", "_"): {("q2", "_")},
        ("q1", "0", "_"): {("q1", "1")},
        ("q2", "_", "$"): {("q4", "_")},
        ("q2", "0", "1"): {("q3", "_")},
        ("q2", "1", "1"): {("q2", "_")},
        ("q3", "0", "1"): {("q3", "_")},
        ("q3", "_", "$"): {("q4", "_")}
    }
    q0 = "q0"
    F = {"q4"}

    return PDA(Q, Sigma, Gamma, delta, q0, F)


if __name__ == "__main__":
    problem1().submit_as_answer(1)
    problem2().submit_as_answer(2)
    problem3().submit_as_answer(3)
    problem4().submit_as_answer(4)
    problem5().submit_as_answer(5)
    problem6().submit_as_answer(6)
    problem7().submit_as_answer(7)
    registry.export_submissions()
